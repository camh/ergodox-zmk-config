#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MEH LS(LC(LALT))
#define END_CALL LC(LA(LG(END)))

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
    &bootloader
    &none      &none         &none        &none       &none       &none      &none      &none      &none      &none       &none      &none       &none            &none
    &kp ESC    &kp Q         &kp W        &kp E       &kp R       &kp T      &none      &none      &kp Y      &kp U       &kp I      &kp O       &kp P            &kp BSLH
    &kp TAB    &mt LSHIFT A  &mt LCTRL S  &mt LALT D  &mt LGUI F  &kp G                            &kp H      &mt RGUI J  &mt RALT K &mt RCTRL L &mt RSHIFT SEMI  &kp SQT
    &kp RET    &lt 3 Z       &kp X        &kp C       &kp V       &kp B      &none      &none      &kp N      &kp M       &kp CMMA   &kp DOT     &lt 3 MINUS      &kp SLASH
    &none      &none         &none        &none       &kp LGUI                                                &kp MEH     &none      &none       &none            &none
                                                                  &none      &none      &none      &none
                                                                             &none      &none
                                                      &kp SPC     &mo 1                            &kp mo 2   &kp BKSP
                                                                             &none      &none
                        >;
                };

                common_layer {
                        bindings = <
    &bootloader
    &trans      &trans      &trans      &trans      &trans     &trans        &trans      &trans      &trans       &trans       &trans       &trans        &trans         &trans
    &trans      &trans      &kp LA(F16) &kp LA(F17) &kp F16    &kp F17       &trans      &trans      &kp LC(LEFT) &kp LA(LEFT) &kp UP       &kp LA(RIGHT) &kp LC(RIGHT)  &kp DEL
    &trans      &trans      &trans      &trans      &trans     &kp LS(LG(Z))                         &kp PG_UP    &kp LEFT     &kp DOWN     &kp RIGHT     &trans         &kp LG(BKSP)
    &trans      &trans      &kp LG(X)   &kp LG(C)   &kp LG(V)  &kp LG(Z)     &trans      &trans      &kp PG_DOWN  &bt BT_CLR   &out OUT_USB &out OUT_BLE  &out OUT_TOG   &to 4
    &trans      &trans      &trans      &trans      &trans                                                        &trans       &trans       &trans        &trans         &trans
                                                               &trans        &trans      &trans      &trans
                                                                             &trans      &trans
                                                    &trans     &trans                                &trans       &trans
                                                                             &trans      &trans
                        >;
                };

                numbers_layer {
                        bindings = <
    &bootloader
    &trans      &trans      &trans      &trans      &trans     &trans      &trans      &trans      &trans           &trans      &trans      &trans      &trans       &trans
    &trans      &kp F6      &kp F7      &kp F8      &kp F9     &kp F10     &trans      &trans      &kp KP_ASTERISK  &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_PLUS  &kp END_CALL
    &trans      &trans      &trans      &trans      &trans     &trans                              &kp KP_SLASH     &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_MINUS &kp KP_N0
    &trans      &kp F1      &kp F2      &kp F3      &kp F4     &kp F5      &trans      &trans      &kp CMMA         &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_DOT   &trans
    &trans      &trans      &trans      &trans      &trans                                                          &trans      &trans      &trans      &trans       &trans
                                                               &trans      &trans      &trans      &trans
                                                                           &trans      &trans
                                                    &trans     &trans                              &trans          &trans
                                                                           &trans      &trans
                        >;
                };

                symbols_layer {
                        bindings = <
    &bootloader
    &trans      &trans       &trans      &trans      &trans     &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans            &trans
    &trans      &kp EXCL     &kp AT      &kp HASH    &kp DLLR   &kp PRCNT   &trans      &trans      &kp CARET   &kp AMPS    &kp STAR    &kp GRAVE   &kp TILDE         &trans   
    &trans      &kp LA(SEMI) &kp LBKT    &kp RBKT    &kp LBRC   &kp RBRC                            &kp LPAR    &kp LPAR    &kp SQT     &kp DQT     &kp LS(LA(MINUS)) &trans  
    &trans      &kp          &kp BSLH    &kp PIPE    &kp UNDER  &kp MINUS   &trans      &trans      &kp EQUAL   &kp PLUS    &kp SLASH   &kp QMARK   &trans            &trans
    &trans      &trans       &trans      &trans      &trans                                                     &trans      &trans      &trans      &trans            &trans
                                                                &trans      &trans      &trans      &trans
                                                                            &trans      &trans
                                                     &trans     &trans                              &trans      &trans
                                                                            &trans      &trans
                        >;
                };

                game_layer {
                        bindings = <
    &bootloader
    &trans      &trans      &trans      &trans      &trans     &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
    &trans      &trans      &trans      &trans      &trans     &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
    &trans      &trans      &trans      &trans      &trans     &trans                              &trans      &trans      &trans      &trans      &trans      &trans
    &trans      &trans      &trans      &trans      &trans     &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
    &trans      &trans      &trans      &trans      &trans                                                     &trans      &trans      &trans      &trans      &trans
                                                               &trans      &trans      &trans      &trans
                                                                           &trans      &trans
                                                    &trans     &trans                              &trans      &trans
                                                                           &trans      &trans
                        >;
                };

        };
};
